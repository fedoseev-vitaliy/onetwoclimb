// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/onetwoclimb/internal/server/models"
)

// DownloadFileOKCode is the HTTP code returned for type DownloadFileOK
const DownloadFileOKCode int = 200

/*DownloadFileOK download file

swagger:response downloadFileOK
*/
type DownloadFileOK struct {

	/*
	  In: Body
	*/
	Payload io.ReadCloser `json:"body,omitempty"`
}

// NewDownloadFileOK creates DownloadFileOK with default headers values
func NewDownloadFileOK() *DownloadFileOK {

	return &DownloadFileOK{}
}

// WithPayload adds the payload to the download file o k response
func (o *DownloadFileOK) WithPayload(payload io.ReadCloser) *DownloadFileOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the download file o k response
func (o *DownloadFileOK) SetPayload(payload io.ReadCloser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DownloadFileOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// DownloadFileBadRequestCode is the HTTP code returned for type DownloadFileBadRequest
const DownloadFileBadRequestCode int = 400

/*DownloadFileBadRequest Bad Argument

swagger:response downloadFileBadRequest
*/
type DownloadFileBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDownloadFileBadRequest creates DownloadFileBadRequest with default headers values
func NewDownloadFileBadRequest() *DownloadFileBadRequest {

	return &DownloadFileBadRequest{}
}

// WithPayload adds the payload to the download file bad request response
func (o *DownloadFileBadRequest) WithPayload(payload *models.Error) *DownloadFileBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the download file bad request response
func (o *DownloadFileBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DownloadFileBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DownloadFileNotFoundCode is the HTTP code returned for type DownloadFileNotFound
const DownloadFileNotFoundCode int = 404

/*DownloadFileNotFound File not found

swagger:response downloadFileNotFound
*/
type DownloadFileNotFound struct {
}

// NewDownloadFileNotFound creates DownloadFileNotFound with default headers values
func NewDownloadFileNotFound() *DownloadFileNotFound {

	return &DownloadFileNotFound{}
}

// WriteResponse to the client
func (o *DownloadFileNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// DownloadFileInternalServerErrorCode is the HTTP code returned for type DownloadFileInternalServerError
const DownloadFileInternalServerErrorCode int = 500

/*DownloadFileInternalServerError General server error

swagger:response downloadFileInternalServerError
*/
type DownloadFileInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDownloadFileInternalServerError creates DownloadFileInternalServerError with default headers values
func NewDownloadFileInternalServerError() *DownloadFileInternalServerError {

	return &DownloadFileInternalServerError{}
}

// WithPayload adds the payload to the download file internal server error response
func (o *DownloadFileInternalServerError) WithPayload(payload *models.Error) *DownloadFileInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the download file internal server error response
func (o *DownloadFileInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DownloadFileInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

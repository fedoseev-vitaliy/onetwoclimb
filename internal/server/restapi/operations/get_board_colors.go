// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "github.com/onetwoclimb/internal/server/models"
)

// GetBoardColorsHandlerFunc turns a function with the right signature into a get board colors handler
type GetBoardColorsHandlerFunc func(GetBoardColorsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBoardColorsHandlerFunc) Handle(params GetBoardColorsParams) middleware.Responder {
	return fn(params)
}

// GetBoardColorsHandler interface for that can handle valid get board colors params
type GetBoardColorsHandler interface {
	Handle(GetBoardColorsParams) middleware.Responder
}

// NewGetBoardColors creates a new http.Handler for the get board colors operation
func NewGetBoardColors(ctx *middleware.Context, handler GetBoardColorsHandler) *GetBoardColors {
	return &GetBoardColors{Context: ctx, Handler: handler}
}

/*GetBoardColors swagger:route GET /colors getBoardColors

get board colors

*/
type GetBoardColors struct {
	Context *middleware.Context
	Handler GetBoardColorsHandler
}

func (o *GetBoardColors) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetBoardColorsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetBoardColorsOKBody get board colors o k body
// swagger:model GetBoardColorsOKBody
type GetBoardColorsOKBody struct {

	// colors
	// Required: true
	Colors []*models.Color `json:"colors"`
}

// Validate validates this get board colors o k body
func (o *GetBoardColorsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateColors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBoardColorsOKBody) validateColors(formats strfmt.Registry) error {

	if err := validate.Required("getBoardColorsOK"+"."+"colors", "body", o.Colors); err != nil {
		return err
	}

	for i := 0; i < len(o.Colors); i++ {
		if swag.IsZero(o.Colors[i]) { // not required
			continue
		}

		if o.Colors[i] != nil {
			if err := o.Colors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBoardColorsOK" + "." + "colors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBoardColorsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBoardColorsOKBody) UnmarshalBinary(b []byte) error {
	var res GetBoardColorsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
